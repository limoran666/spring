<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

<!--    Spring有四个注解
某个类上添加任何一个注解都能快速将这个组件加到ioc容器管理
@Controller：控制器 控制器层组件加这个注解
@Service 业务逻辑 给业务逻辑层的组件添加这个注解
@Repository 给数据库层（持久化层 dao层）的添加这个注解
@Component 给不属于以上几层的组件添加这个注解

注解可以随便加 spring底层不会验证你这个组件
但是还是推荐各个层加各自的注解

使用注解将组件快速的加入到容器中需要几步
1.给要添加的组件上标四个注解的任何一个
2.告诉Spring 自动扫描注解 依赖context名称空间
3.一定要导入aop包，支持注解模式

-->
    <!--context:component-scan 自动组件扫描
    base-package:指定扫描的基础包 把基础包以及下面所有的包的所有加了注解的类 自动的扫描进ioc容器-->
 <!--   <context:component-scan base-package="com.morange"></context:component-scan>-->
<!--注解和bean配置相结合-->

    <!--context:exclude-filter 扫描时候可以排除一些不要的组件
    type 指定排除规则
    type="annotation" 按照注解进行排除- 标注了指定注解的组件不要
    expression=""：注解的全类名
    【type="assignable"】：指定排除某个具体的类，按照类排除


    expression=""：类的全类名
    type="aspectj"：后来aspectj表达式
    type="custom"：自定义一个TypeFilter;自己写代码决定哪些使用
    type="regex"：还可以写正则表达式

    -->
 <!--   <context:component-scan base-package="com.morange">
        <context:exclude-filter type="aspectj" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>-->


    <!--只扫描进入哪些组件：默认是全部都扫描进来  use-default-filters="false" 这样就是默认尊崇我们自己的规则了-->
<!--    <context:component-scan base-package="com.morange" use-default-filters="false">
        &lt;!&ndash;指定只扫描哪些&ndash;&gt;
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>-->
    
    
    <!--DI(依赖注入)  spring最吊的!
    @Autowired原理:
 @Autowired
    private BookService bookService;
        1.先按照类型去容器中找到对应的组件 bookService=ioc.getBean(BookService.class)
            1.找到一个：找到就赋值
            2.没找到 就抛异常
            3.找到多个 装配上  然后按照变量名作为id继续匹配 BookService(默认id bookService) BookServiceExt(默认id bookServiceExt)
                    1.匹配上？
                    2.没有匹配上？
                    原因：因为我们按照变量名继续匹配的
                     @Autowired
                private BookService bookServiceExt2;报错
                解决
                 @Qualifier("bookService")//指定一个名字作为id,让spring别使用变量名作为id
发现Autowired标注的自动装配的属性默认是一定装配上的
找到就装配，找不到就抛错，现在让它找不到就算了

@Autowired,@Resource @Inject都是自动装配的意思
@Autowired 最强大
@Resource java自己的依赖注入

@Resource 扩展性强 如果切换成另一个容器框架 @Resource还能用 但是@Autowired就不行

    -->
    <context:component-scan base-package="com.morange"></context:component-scan>
    

</beans>